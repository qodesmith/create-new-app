// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cli - React + Redux project contents of files created Folder - / should populate ".env" correctly 1`] = `
"##########################################################
#           THIS FILE WILL BE GIT IGNORED.               #
#     DO NOT COMMIT THIS FILE INTO VERSION CONTROL!      #
# PLEASE KEEP ANY SENSITIVE DATA OUT OF VERSION CONTROL. #
##########################################################


### Production Notes ###

# When deploying your app to production, you should copy this file
# over to your remote machine. Make sure all values are correct & up to date.



APP_NAME=02-react-redux-test
DEV_SERVER_PORT=8080
"
`;

exports[`cli - React + Redux project contents of files created Folder - / should populate ".gitignore" correctly 1`] = `
"# The majority of this files contents were taken from Github's Node example:
# https://github.com/github/gitignore/blob/master/Node.gitignore

# Mac-specific
.DS_Store

# Ignore all files in the dist folder BUT a few
dist/*
!dist/favicon.ico
!dist/robots.txt

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next
"
`;

exports[`cli - React + Redux project contents of files created Folder - / should populate "README.md" correctly 1`] = `
"This project was created with [Create New App](https://github.com/qodesmith/create-new-app).
"
`;

exports[`cli - React + Redux project contents of files created Folder - / should populate "after-compile-plugin.js" correctly 1`] = `
"/*
  This is a custom Webpack plugin that simply runs a function after each build.
  In Create New App, this is used to console.log the urls to the application
  in the browser as well as (conditionally) the api server url.
*/

class AfterCompilePlugin {
  constructor({ run }) {
    this.run = run
  }

  apply(compiler) {
    compiler.hooks.afterEmit.tap('AfterCompilePlugin', compilation => {
      /*
        Using \`setTimeout\` here simply bumps running \`this.run()\`
        to *after* Webpack has spewed a ton of stuff into the console.
        The idea is to have the url's mentioned above logged at the
        very last moment so they're the last thing the user sees.
      */
      setTimeout(() => this.run && this.run(), 0)
    })
  }
}

module.exports = AfterCompilePlugin
"
`;

exports[`cli - React + Redux project contents of files created Folder - / should populate "postcss.config.js" correctly 1`] = `
"const isProd = process.env.NODE_ENV === 'production'
const purgeCss = require('@fullhuman/postcss-purgecss')
const globAll = require('glob-all')
const combineMediaQuery = require('postcss-combine-media-query')
const combineSelectors = require('postcss-combine-duplicated-selectors')
const autoprefixer = require('autoprefixer')
const sorter = require('css-declaration-sorter')
const nano = require('cssnano')
// const whitelister = require('purgecss-whitelister')


/*
  Why we scope \`purgeCss\` to production only.
  -------------------------------------------
  During development, CSS assets may have been previously purged
  from a webpack reload or initial load. You might try to add classes in JS
  and see no change. This avoids that.
*/
module.exports = {
  plugins: isProd ? [
    // http://bit.ly/2Xtfwao - explains why we're using purge-css here and not as a Webpack plugin.
    purgeCss({
      // Optionally whitelist 3rd party libraries:
      // whitelist: whitelister('./node_modules/some-library/styles.css'),
      content: globAll.sync([
        './src/**/*.js',
        './src/**/*.jsx',
        './src/index.ejs'
      ], { absolute: true }),
      keyframes: false // http://bit.ly/2Xnsqq2
    }),
    combineSelectors({ removeDuplicatedProperties: true }),
    combineMediaQuery(),
    autoprefixer(),
    sorter(),
    nano()
  ] : [
    /*
      During development, ensure that media queries are
      combined and ordered properly so classes have the correct effect!
    */
    combineMediaQuery(),
    sorter()
  ]
}
"
`;

exports[`cli - React + Redux project contents of files created Folder - / should populate "webpack.config.js" correctly 1`] = `
"require('dotenv').config({ path: \`\${__dirname}/.env\` }) // http://bit.ly/2WE8EJP
const { NODE_ENV, DEV_SERVER_PORT, API, API_PORT, API_WEBPACK } = process.env
const path = require('path')
const webpack = require('webpack')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const { CleanWebpackPlugin } = require('clean-webpack-plugin')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const TerserPlugin = require('terser-webpack-plugin')
const AfterCompilePlugin = require('./after-compile-plugin')


console.log(\`

  +-----------------------------------+
  |                                   |
      NODE ENVIRONMENT: \${NODE_ENV}
  |                                   |
  +-----------------------------------+

\`)

if (NODE_ENV === 'production') console.log('Building for production...\\\\n\\\\n')

module.exports = (env, argv) => ({
  // http://bit.ly/2w4ndaR - new in Webpack 4.
  mode: env.prod ? 'production' : 'development',

  // http://bit.ly/2IEFVfK - fail on errors when building for production.
  bail: !!env.prod,

  /*
    http://bit.ly/2vZm5Ft
    The base directory, an absolute path, for resolving
    entry points and loaders from configuration.
  */
  context: path.resolve(__dirname, 'src'),

  /*
    http://bit.ly/2w3Ahxa
    The point(s) to enter the application.
  */
  entry: [
    path.resolve(__dirname, 'src/entry.jsx')
  ],

  /*
    http://bit.ly/2JojX2u
    The top-level output key contains set of options instructing webpack
    on how and where it should output your bundles, assets and anything else
    you bundle or load with webpack.
  */
  output: {

    /*
      http://bit.ly/2KoIZP4
      This option determines the name of each output bundle.
    */
    filename: '[name].[hash].bundle.js',

    /*
      http://bit.ly/2MtdylV
    */
    chunkFilename: '[name].[hash].chunk.js',

    /*
      http://bit.ly/2KjYRSI
      The output directory as an absolute path.
    */
    path: path.resolve(__dirname, 'dist'),

    /*
      http://bit.ly/2Kmdcy1
      Adds helpful info in development when reading the generated code.
    */
    pathinfo: !env.prod,

    /*
      http://bit.ly/2KpiF75
      The URL of your \`output.path\` from the view of the HTML page.
      The value of the option is prefixed to every URL created by the runtime or loaders.
    */
    publicPath: '/',

    /*
      http://bit.ly/2IFBbGL
      http://bit.ly/33nRRub - PR in React codebase.
      The default global object is 'window'. To allow module chunks to work with
      web workers, a value of 'this' is used instead.
    */
    globalObject: 'this'
  },

  /*
    http://bit.ly/2KmfoWl
    These options determine how the different types of modules within a project will be treated.
  */
  module: {

    /*
      An array of Rules which are matched to requests when modules are created.
      These rules can modify how the module is created.
      They can apply loaders to the module, or modify the parser.
    */
    rules: [
      /*
        http://bit.ly/2KjZb3S
        A Rule can be separated into three parts â€” Conditions, Results and nested Rules.

        Conditions (http://bit.ly/2Ko8uja)
        ----------
        In a Rule the properties \`test\`, \`include\`, \`exclude\` and \`resource\` are
        matched with the resource and the property issuer is matched with the issuer.
                         --------                                             ------

        When we import './style.css' within app.js,
        the resource is /path/to/style.css and the issuer is /path/to/app.js.

        Results
        -------
        There are two output values of a Rule:
          1. Applied loaders
            - An array of loaders applied to the resource.
            - Properties: \`loader\`, \`options\`, \`use\`.
            - The \`enforce\` property affects the loader category. Whether it's a normal, pre- or post- loader.
          2. Parser options
            - An options object which should be used to create the parser for this module.
            - Properties: \`parser\`.

        Nested Rules
        ------------
        Nested rules can be specified under the properties \`rules\` and \`oneOf\`.
        These rules are evaluated when the Rule condition matches.
      */

      /*
        JAVASCRIPT
        ----------
        * ESx => ES5
        * JSX => ES5
      */
      {
        // sideEffects: false,
        test: /\\\\.(js|jsx)$/,
        include: path.resolve(__dirname, 'src'),

        /*
          http://bit.ly/2KmGQDb
          Loaders will be applied from right to left.
          E.x.: loader3(loader2(loader1(data)))
        */
        use: [
          // http://bit.ly/2KnMe9c
          {
            /*
              http://bit.ly/2KpNbOj - Babel loader.
                - babel-loader
                - @babel/core
                - @babel/preset-env
                - @babel/preset-react
                - @babel/plugin-proposal-object-rest-spread
                - @babel/plugin-proposal-class-properties
                - @babel/plugin-syntax-dynamic-import
                - @babel/plugin-proposal-optional-chaining
                - @babel/plugin-proposal-nullish-coalescing-operator
            */
            loader: 'babel-loader',
            options: {
              presets: [
                /*
                  To get tree shaking working, we need the \`modules: false\` below.

                  http://bit.ly/2KkhOVv - 2ality blog mentions that the issue is caused
                  by under-the-hood usage of \`transform-es2015-modules-commonjs\`.

                  http://bit.ly/2KnKtZN - A comment on the above post shows that we
                  can use \`modules: false\`.
                */
                [
                  '@babel/preset-env', // http://bit.ly/2KoqDxm
                  {
                    modules: false, // Needed for tree shaking to work (see above).
                    useBuiltIns: 'entry', // http://bit.ly/2KkBZCu
                    corejs: { // http://bit.ly/2KkC09w
                      version: 3,
                      proposals: true
                    }
                  }
                ],
                '@babel/preset-react' // http://bit.ly/2KpNOYb
              ],

              // http://bit.ly/2KmgNfz - List of Babel plugins.
              plugins: [
                '@babel/plugin-proposal-object-rest-spread', // http://bit.ly/2KnLroT
                '@babel/plugin-proposal-class-properties', // http://bit.ly/2KoJQPM
                '@babel/plugin-syntax-dynamic-import', // http://bit.ly/2KoKcG6
                '@babel/plugin-proposal-optional-chaining', // http://bit.ly/2ZDuBdB
                '@babel/plugin-proposal-nullish-coalescing-operator' // http://bit.ly/2CvleQ4
              ]
            }
          }
        ]
      },

      /*
        SCSS
        ----
        * SCSS => CSS
        * Extract CSS from JS bundle => separate asset
        * Asset => <link> in index.html
      */
      {
        test: /\\\\.(scss|css)$/,
        include: path.resolve(__dirname, 'src'),
        use: [
          MiniCssExtractPlugin.loader, // http://bit.ly/2Kme3id
          {
            /*
              http://bit.ly/2WBprNT
              Using \`fast-css-loader\` combined with \`fast-sass-loader\` (below)
              produces about a 50% faster build. You'll notice it while developing.
              \`css-loader\` is still included so feel free to switch.
            */
            loader: 'fast-css-loader',
            options: {
              importLoaders: 2
            }
          },
          'postcss-loader', // http://bit.ly/2WOusTr - needs to be *after* \`css-loader\`.

          /*
            http://bit.ly/2WI1fcw
            Using \`fast-sass-loader\` combined with \`fast-css-loader\` (above)
            produces about a 50% faster build. You'll notice it while developing.
            \`sass-loader\` is still included so feel free to switch.
          */
          'fast-sass-loader'
        ]
      },

      /*
        FONTS
        -----
        * Copies fonts found within the \`src\` tree to the \`dist\` folder
        * Keeps the original file name
      */
      {
        test: /\\\\.(woff|woff2|eot|ttf|otf)$/,
        include: path.resolve(__dirname, 'src'),
        use: [
          {
            loader: 'file-loader',
            options: {
              name: '[name].[ext]'
            }
          }
        ]
      },

      /*
        IMAGES
        ------
        * Copies fonts found within the \`src\` tree to the \`dist\` folder
        * Keeps the original file name
      */
      {
        test: /\\\\.(png|svg|jpg|gif)$/,
        include: path.resolve(__dirname, 'src/assets'),
        use: [
          {
            loader: 'file-loader',
            options: {
              name: '[name].[ext]'
            }
          }
        ]
      }
    ]
  },

  // http://bit.ly/2WGnFeg
  resolve: {

    /*
      http://bit.ly/2WyqhuP
      Create aliases to import certain modules more easily.
      Eliminates having to type out ../../../ all the time.
    */
    alias: {
      components: path.resolve(__dirname, 'src/components'),
      assets: path.resolve(__dirname, 'src/assets'),
      hooks: path.resolve(__dirname, 'src/hooks'),
      helpers: path.resolve(__dirname, 'src/helpers'),
      actions: path.resolve(__dirname, 'src/redux/actions'),
      middleware: path.resolve(__dirname, 'src/redux/middleware'),
      reducers: path.resolve(__dirname, 'src/redux/reducers')
    },

    /*
      http://bit.ly/2WI1BQo
      Automatically resolve certain extensions without having to type them out.
    */
    extensions: ['.js', '.jsx', '.json', '.scss']
  },

  // http://bit.ly/2WH6fOH
  optimization: {
    minimize: !!env.prod,
    minimizer: [
      // http://bit.ly/2WEaavt - List of reasons we're using Terser instead (Webpack is too!).
      new TerserPlugin({ // http://bit.ly/2WI3M6G
        cache: true, // http://bit.ly/2WNdoNC
        parallel: true, // http://bit.ly/2WJ6hWf
        terserOptions: { // http://bit.ly/2WIWVK5
          compress: {
            ecma: 5,
            comparisons: false, // http://bit.ly/2MtqwQv
            inline: 2 // http://bit.ly/2IDJXFg
          },
          mangle: {
            safari10: true // http://bit.ly/2MsRTdv
          },
          output: {
            ecma: 5,
            comments: false,
            ascii_only: true // Helps minimize regex and emoji's correctly.
          }
        }
      })
    ]
  },

  // http://bit.ly/2WOvpLv
  plugins: [
    /*
      http://bit.ly/2WEeBGF
      Make global variables available to the app.
      Needed in order to use the production-ready minified version of React.
    */
    new webpack.DefinePlugin({
      // Convenience variables.
      __DEV__: !env.prod,
      __PROD__: env.prod,

      /*
        http://bit.ly/2WBx4DZ
        Needed in order to use the production-ready minified version of React.
        Avoids warnings in the console.
      */
      'process.env': {
        NODE_ENV: JSON.stringify(env.prod ? 'production' : 'development')
      }
    }),

    // This must be used in conjunction with the associated scss module rule.
    new MiniCssExtractPlugin({
      // Options similar to the same options in webpackOptions.output
      // Both options are optional.
      filename: '[name].[hash].css',
      chunkFilename: '[id].css'
    }),

    /*
      http://bit.ly/2WEalXF
      A webpack plugin to remove/clean your build folder(s) before building.
      The targeted folder is whatever is set above for \`output.path\`.
      Since our build process generates a js, css, and html file, we'll only
      clean those types. This allows you to put any other static assets in the
      \`dist\` folder worry free, such as fonts, images, etc.
    */
    new CleanWebpackPlugin({
      verbose: true,
      cleanOnceBeforeBuildPatterns: ['*.js', '*.css', '*.html'],
      cleanAfterEveryBuildPatterns: ['*.js', '*.css', '*.html']
    }),

    /*
      http://bit.ly/2WJ6pFd, http://bit.ly/2WBxaLR
      Generates the \`index.html\` file.
    */
    new HtmlWebpackPlugin({
      template: path.resolve(__dirname, 'src/index.ejs'),
      title: '',
      mobileThemeColor: '#000000',
      description: '',
      minify: {
        collapseWhitespace: true,
        removeComments: true
      }
    }),

    /*
      A simple, custom Webpack plugin to run a function after each build.
      You can see the code in \`after-compile-plugin.js\` in the project root dir.
    */
    !env.prod && new AfterCompilePlugin({
      run: () => {
        console.log('\\\\n')
        API && console.log(\`ðŸŒŽ  => API listening on port \${API_PORT}...\`)
        console.log(\`ðŸ’»  => Application running in browser at http://localhost:\${DEV_SERVER_PORT}\\\\n\\\\n\`)
      }
    })
  ].filter(Boolean),

  // http://bit.ly/2WEpbgZ
  devServer: {
    /*
      http://bit.ly/2WHYfwO
      Tell the dev server where to serve content from.
      This is only necessary if you want to serve static files.
      Content not served from Webpack's devServer is served from here.
    */
    contentBase: path.resolve(__dirname, 'dist'),

    /*
      http://bit.ly/2WFe8nS
      '...the index.html page will likely have to be served
      in place of any 404 responses.'
    */
    historyApiFallback: true,

    /*
      http://bit.ly/2WOwJhr
      Want to view your site on your phone?
      Make sure your computer and phone are on the same wifi network,
      and navigate to your computer's ip addres: 192.1.2.3:<dev server port>
    */
    host: '0.0.0.0',

    // http://bit.ly/2WOx4kd
    open: true,

    // http://bit.ly/2WFzCkq
    port: DEV_SERVER_PORT,

    /*
      http://bit.ly/2WIXOSV, http://bit.ly/2WDMWpv
      Nobody wants to see 0.0.0.0 in the browser. This get's rid of that.
    */
    public: \`http://localhost:\${DEV_SERVER_PORT}\`,

    /*
      http://bit.ly/2XlEOXN
      Redirect non-static asset calls to the backend API server.
      Unrecognized urls (non-API calls) will be directed to '/'.
      404's will be served \`index.html\` by \`historyApiFallback\` above.
    */
    proxy: API_WEBPACK ? {
      [API_WEBPACK]: {
        target: \`http://localhost:\${API_PORT}\`,
        bypass(req, res, proxyOptions) {
          // Direct all non-get requests to the API server.
          if (req.method.toLowerCase() !== 'get') return

          /*
            Proxy url (browser) requests back to '/'
            and let the front end do all the routing.
            For all others, let the API server respond.
          */

          /*
            http://bit.ly/2XlEOXN
            Url / browser request - allow front end routing to handle all the things.
          */
          if ((req.headers.accept || '').includes('html')) return '/'

          // Let the API server respond by implicitly returning here.
        }
      }
    } : {}
  },

  /*
    http://bit.ly/2WFerz2
    Seems to be the fastest one with accurate line numbers
    matching what you'd see in your editor.
  */
  devtool: !env.prod && 'cheap-module-eval-source-map',

  /*
    http://bit.ly/2WFA41T
    The externals configuration option provides a way of excluding dependencies
    from the output bundles. Instead, the created bundle relies on that dependency
    to be present in the consumer's environment.

    If you want to load 3rd party libraries via a CDN instead of bundling them,
    include them here in addition to adding \`<script>\` tags to \`index.ejs\`.
  */
  // externals: {
  //   react: { root: 'react' },
  //   'react-dom': { root: 'reactDOM' },
  //   // 'react-router-dom': { root: 'ReactRouterDOM' }
  // },

  /*
    http://bit.ly/2w55YpG
    \`web\` is default, but if you're making a 3rd party library
    consumed in Node, change this to \`node\`. There are others as well.
  */
  target: 'web'
})
"
`;

exports[`cli - React + Redux project contents of files created Folder - /dist should populate "favicon.ico" correctly 1`] = `"        h  &         ï¿½  ï¿½  (                                   Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Nï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½022.32031.32Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½/42342.32.32:ksPï¿½ï¿½Pï¿½ï¿½022022133.32022142Nï¿½ï¿½Oï¿½ï¿½022022023022.320221;;Pï¿½ï¿½Sï¿½ï¿½.31Pï¿½ï¿½Qï¿½ï¿½022022Pï¿½ï¿½Rï¿½ï¿½-21022Nï¿½ï¿½Pï¿½ï¿½Rï¿½ï¿½022133Nï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½/43.32Nï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Uï¿½ï¿½022022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32.32Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Oï¿½ï¿½1330221331.*Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32.32Qï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½.310220220220'#Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32.32Qï¿½ï¿½Pï¿½ï¿½,)%022022/34Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32.32Qï¿½ï¿½Pï¿½ï¿½022022Nï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32.32Qï¿½ï¿½Pï¿½ï¿½022022Qï¿½ï¿½Qï¿½ï¿½/43Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32.32Qï¿½ï¿½Pï¿½ï¿½Lï¿½ï¿½022022031022133Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32022Mï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½1330223))Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½                                                                (       @                            Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Nï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½Oï¿½ï¿½Nï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Lï¿½ï¿½Qï¿½ï¿½Lï¿½ï¿½7OO0547RVNï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½@ï¿½ï¿½0;91657X[Nï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½5Z^022022.32142031022.32@ï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½Eï¿½ï¿½/42.32342022.32.31.32.32:ksNï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Lï¿½ï¿½1,+0220220220220220220220220223EDNï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½0/1133022022022022022022022022222.31Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½467022022022342133022.32022022022142Pï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½/11022022022222023142022.32.320220220221;;Pï¿½ï¿½Pï¿½ï¿½/42022022022111>ï¿½ï¿½Oï¿½ï¿½022022022022-20045Nï¿½ï¿½Lï¿½ï¿½Pï¿½ï¿½.32022022022-3./43Mï¿½ï¿½Mï¿½ï¿½6bi-41022022022.43Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Sï¿½ï¿½342.31Lï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½6SW022022022031Pï¿½ï¿½Nï¿½ï¿½Rï¿½ï¿½6QU-21422022Nï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Rï¿½ï¿½133022022133Qï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½9fjPï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32022.32022Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½022Rï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½231022022/43Mï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½/43022.32022Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Oï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Uï¿½ï¿½031022022022Pï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½133022022022133Nï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Nï¿½ï¿½Oï¿½ï¿½0.-133022022022133/431.*Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Mï¿½ï¿½389-32111022133022022022031Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½Jï¿½ï¿½.310220220220220220220220'#Pï¿½ï¿½Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Oï¿½ï¿½/34022022022022031-21.32Bï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½,)%222022022022022/34=ï¿½ï¿½Qï¿½ï¿½Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32022022.31133Pï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½022022022.32Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Mï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Lï¿½ï¿½022022022/11Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Mï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Tï¿½ï¿½022022022022Qï¿½ï¿½Nï¿½ï¿½Qï¿½ï¿½Nï¿½ï¿½/43022Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½/43133022022022/11.32/34022022022.31Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Lï¿½ï¿½134022022022/430310220220221333?AQï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½.'$/11022022022022022022/43,'&Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32022022133Mï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½0)&1330310220223))Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½Oï¿½ï¿½Nï¿½ï¿½Oï¿½ï¿½Oï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½                                                                                                                                "`;

exports[`cli - React + Redux project contents of files created Folder - /dist should populate "robots.txt" correctly 1`] = `""`;

exports[`cli - React + Redux project contents of files created Folder - /src should populate "entry.jsx" correctly 1`] = `
"/*
  http://bit.ly/2DTXGpe - \`@babel/polyfill\` has been deprecated.
  If you need to polyfill certain JS features, uncomment the two imports below.
  Be sure to adjust the \`browserslist\` field in your \`package.json\` file.
*/
// import 'core-js/stable'
// import 'regenerator-runtime/runtime' // Needed to polyfill async / await.

// Import our top-level sass file.
import './styles/styles.scss'

// Import React.
import React from 'react'
import ReactDOM from 'react-dom'

// Import our store provider.
import { Provider } from 'react-redux'

// Import our top-level component.
import App from 'components/App'

// Import a store, created & ready to go.
import store from './store'


// Top-level classes on the body. Feel free to remove / change.
document.body.className = 'bg-black-80 fw4 white-80'

// Mount our app.
ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.querySelector('#app')
)
"
`;

exports[`cli - React + Redux project contents of files created Folder - /src should populate "index.ejs" correctly 1`] = `
"<!DOCTYPE html>
<html lang=\\"en-US\\">
<head>
  <title><%= htmlWebpackPlugin.options.title %></title>
  <meta charset=\\"UTF-8\\">
  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">
  <meta name=\\"theme-color\\" content=\\"#000000\\">

  <% if (htmlWebpackPlugin.options.description) { %>
  <meta name=\\"description\\" content=\\"<% htmlWebpackPlugin.options.description %>\\">
  <% } %>

  <% if (htmlWebpackPlugin.options.mobileThemeColor) { %>
  <meta name=\\"theme-color\\" content=\\"<% htmlWebpackPlugin.options.mobileThemeColor %>\\">
  <meta name=\\"apple-mobile-web-app-status-bar-style\\" content=\\"<% htmlWebpackPlugin.options.mobileThemeColor %>\\">
  <% } %>

  <link href=\\"/favicon.ico\\" rel=\\"shortcut icon\\" type=\\"image/x-icon\\" />
</head>
<body>
  <div id=\\"app\\"></div>
</body>
</html>
"
`;

exports[`cli - React + Redux project contents of files created Folder - /src should populate "store.js" correctly 1`] = `
"import { combineReducers, createStore, applyMiddleware, compose } from 'redux'
import app from 'reducers/appReducer'


// Add all your custom middleware to this array.
const middlewareList = []

// Add all your reducers to this object.
const rootReducer = combineReducers({ app })

/*
  http://bit.ly/2XqEeYM
  Using Redux DevTools extension? You should...
  If we're connecting a mobile device to our local machine running the app,
  then we may have an issue with Redux DevTools not being installed.
  The below logic takes care of that.
*/
const composeEnhancers = !__PROD__ ? (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose) : compose

// Create the Redux store in all its glory!
const store = createStore(
  rootReducer,
  composeEnhancers(applyMiddleware(...middlewareList))
)

export default store
"
`;

exports[`cli - React + Redux project contents of files created Folder - /src/components should populate "App.jsx" correctly 1`] = `
"import React from 'react'
import { connect } from 'react-redux'
import { changeColor } from 'actions'


const App = ({ color, randomizeColor }) => {
  return (
    <>
      <header className=\\"pv5 bg-gold black-80 tc\\">
        <h1 className=\\"mt0 mb1\\">Create New App</h1>
        <div className=\\"ttc\\">by Qodesmith</div>
      </header>
      <div className=\\"pt4 pb1 tc\\">
        Go save the world with <span className=\\"b\\" style={{ color }}>JavaScript</span>
      </div>
      <div className=\\"tc\\">
        and edit <code>src/components/<span className=\\"b\\">App.jsx</span></code>!
      </div>
      <div className=\\"df justify-center mt3\\">
        <div className=\\"ph3 pv2 no-select ba-1px pointer\\" onClick={randomizeColor}>
          Random Color
        </div>
      </div>
    </>
  )
}

const mapStateToProps = ({ app }) => app
const mapDispatchToProps = dispatch => ({
  randomizeColor: () => dispatch(changeColor())
})

export default connect(mapStateToProps, mapDispatchToProps)(App)
"
`;

exports[`cli - React + Redux project contents of files created Folder - /src/helpers should populate "index.js" correctly 1`] = `
"export const cn = (...args) => {
  const classNames = args.reduce((arr, thing) => {
    if (typeof thing === 'string') return [...arr, ...thing.split(' ')] // Strings.
    if (({}).toString.call(thing) !== '[object Object]') return arr // Ignore everything else but objects.

    return Object
      .keys(thing)
      .reduce((arr2, key) => (thing[key] ? [...arr2, key] : arr2), arr)
  }, [])

  // Avoid duplicate names.
  return [...new Set(classNames)].join(' ')
}

// http://bit.ly/2Xmuwqf - micro UUID!
export const uuid = a=>a?(a^Math.random()*16>>a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,uuid)

export const randomNum = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)

// Simple email validation :)
export const isEmail = email => {
  return [
    email.includes('@'), // Has the @ sybmol.
    email.trim().split('@')[0].length, // Has characters before the @ symbol.
    email.split('@').pop().includes('.'), // Has a period after the @ symbol.
    !email.trim().includes(' '), // Doesn't contain spaces.
    email.length > 5, // At least 6 chars long => a@b.co

    // Ensure at least 2 characters in the \`.com\` portion.
    email.trim().split('@').pop().split('.').pop().length > 1
  ].every(Boolean)
}

const letters = 'abcdef'
const numbers = '0123456789'
export const randomHexColor = () => (
  letters.split('').reduce(hex => {
    const set = randomNum(0, 1) ? letters : numbers
    const index = randomNum(0, set.length - 1)
    return \`\${hex}\${set[index]}\`
  }, '#')
)
"
`;

exports[`cli - React + Redux project contents of files created Folder - /src/redux/actions should populate "index.js" correctly 1`] = `
"export const changeColor = () => ({ type: 'CHANGE_COLOR' })
"
`;

exports[`cli - React + Redux project contents of files created Folder - /src/redux/reducers should populate "appReducer.js" correctly 1`] = `
"import { randomHexColor } from 'helpers'

const initialState = { color: '#ffd700' }

const appReducer = (state = initialState, action = {}) => {
  switch (action.type) {
    case 'CHANGE_COLOR':
      return { ...state, color: randomHexColor() }
    default:
      return state
  }
}

export default appReducer
"
`;

exports[`cli - React + Redux project contents of files created Folder - /src/styles should populate "_global.scss" correctly 1`] = `
"/*
  px <-> em: http://pxtoem.com/
*/

* {
  box-sizing: border-box;
}

html,
body {
  margin: 0;
  padding: 0;

  // https://mzl.la/2KnTfHh
  // size/line-height | family
  font: 16px/1 'Open Sans', Arial, Helvetica, sans-serif;
}
"
`;

exports[`cli - React + Redux project contents of files created Folder - /src/styles should populate "styles.scss" correctly 1`] = `
"/////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                             //
//  This file will be the top-most entry point for all styles in the app.                      //
//  Any dependant styles should be explicitly imported here.                                   //
//                                                                                             //
//  Using \`~\` - http://bit.ly/2KmElRj                                                          //
//  \\"The sass-loader uses node-sass' custom importer feature to pass all queries               //
//  to the webpack resolving engine. Thus you can import your Sass modules from node_modules.  //
//  Just prepend them with a ~ to tell webpack that this is not a relative import.\\"            //
//  Think of \`~\` as a way of saying \`node_modules\`.                                            //
//                                                                                             //
//  Importing CSS files - include the extension:                                               //
//  @import '~my-library/styles.css'                                                           //
//  @import 'path/to/my/library/styles.css'                                                    //
//                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////


/*
  Sassyons
  --------

  PSA - Sassyons is a utility library that is NOT meant to be bundled as a whole into your project.
  There are an obnoxious amount of classes that give you, the developer, full control
  over styling your project. HOWEVER, the Webpack bundle included with this project
  uses \`purgecss\` to strip out unused styles, so you need not be concered!

  Read more - https://github.com/qodesmith/sassyons
*/
@import '~sassyons/scss/sassyons';


/*
  Application Styles
  ------------------

  All our application-specific styles will go below.
  @import each of them in reverse-priority order (bottom = highest priority).
*/
@import 'global';
"
`;
