// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - / should populate ".gitignore" correctly 1`] = `
"# The majority of this files contents were taken from Github's Node example:
# https://github.com/github/gitignore/blob/master/Node.gitignore

# Mac-specific
.DS_Store

# Ignore all files in the dist folder BUT a few
dist/*
!dist/favicon.ico
!dist/robots.txt

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - / should populate "README.md" correctly 1`] = `
"This project was created with [Create New App](https://github.com/qodesmith/create-new-app).
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - / should populate "after-compile-plugin.js" correctly 1`] = `
"/*
  This is a custom Webpack plugin that simply runs a function after each build.
  In Create New App, this is used to console.log the urls to the application
  in the browser as well as (conditionally) the api server url.
*/

class AfterCompilePlugin {
  constructor({ run }) {
    this.run = run
  }

  apply(compiler) {
    compiler.hooks.afterEmit.tap('AfterCompilePlugin', compilation => {
      /*
        Using \`setTimeout\` here simply bumps running \`this.run()\`
        to *after* Webpack has spewed a ton of stuff into the console.
        The idea is to have the url's mentioned above logged at the
        very last moment so they're the last thing the user sees.
      */
      setTimeout(() => this.run && this.run(), 0)
    })
  }
}

module.exports = AfterCompilePlugin
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - / should populate "postcss.config.js" correctly 1`] = `
"const isProd = process.env.NODE_ENV === 'production'
const purgeCss = require('@fullhuman/postcss-purgecss')
const globAll = require('glob-all')
const noComment = require('postcss-discard-comments')
const mqPacker = require('css-mqpacker')
const combineSelectors = require('postcss-combine-duplicated-selectors')
const autoprefixer = require('autoprefixer')
const colormin = require('postcss-colormin').default
const sorter = require('css-declaration-sorter')
// const whitelister = require('purgecss-whitelister')


/*
  Why we scope \`purgeCss\` to production only.
  -------------------------------------------
  During development, CSS assets may have been previously purged
  from a webpack reload or initial load. You might try to add classes in JS
  and see no change. This avoids that.
*/
module.exports = {
  plugins: [
    // https://goo.gl/igXRk6 - explains why we're using purge-css here and not as a Webpack plugin.
    isProd && purgeCss({
      // Optionally whitelist 3rd party libraries:
      // whitelist: whitelister('./node_modules/some-library/styles.css'),
      content: globAll.sync([
        './src/**/*.js',
        './src/**/*.jsx',
        './src/index.ejs'
      ], { absolute: true }),
      keyframes: false // https://goo.gl/18L7bj
    }),
    noComment(),
    mqPacker({ sort: true }),
    combineSelectors({ removeDuplicatedProperties: true }),
    autoprefixer(),
    colormin(),
    sorter()
  ].filter(Boolean)
}
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - / should populate "server.js" correctly 1`] = `
"const chalk = require('chalk')
const { errorToObject } = require('./api/utilities/errorUtil')
const lines = '-'.repeat(45)

// 'unhandledRejection' => promise rejection
process.on('unhandledRejection', err => {
  const date = chalk.cyan(Date.now())
  const msg = chalk.red.bold(\`Unhandled promise rejection at \${date}:\\\\n\`)

  console.log(\`\\\\n\${lines}\`)
  console.error(msg, errorToObject(err))
  console.log(\`\${lines}\\\\n\`)
})

// 'uncaughtException' => application error
process.on('uncaughtException', err => {
  const date = chalk.cyan(Date.now())
  const msg = chalk.red.bold(\`\\\\nUncaught exception at \${date}:\\\\n\`)

  console.log(\`\\\\n\${lines}\`)
  console.error(msg, errorToObject(err))
  process.exit(1)
})

/*
  Please DO NOT INCLUDE the \`.env\` file in version control.
  It is in the \`.gitignore\` file. Keep it that way.
  It contains your sensitive data! Instead, when deploying to production,
  you should manually copy the \`.env\` file to your hosting provider.
*/
require('dotenv').config({ path: \`\${__dirname}/.env\` }) // https://goo.gl/Cj8nKu

const { APP_NAME, SECRET, API_PORT, API, DEV_SERVER_PORT, MONGO_SESSION_COLLECTION, NODE_ENV } = process.env // Environment variables.
const isProd = NODE_ENV === 'production'
const path = require('path')
const express = require('express')
const helmet = require('helmet') // Sets various http headers - https://goo.gl/g7K98x
const compression = require('compression') // Gzip! - https://goo.gl/ShNShk
const bp = require('body-parser') // Makes \`req.body\` available - https://goo.gl/0UviQN
const session = require('express-session') // Save data across requests - https://goo.gl/GEFgyQ
const app = express()
const mongo = require('./api/utilities/mongo')

// MongoDB
const { sessionStoreErr } = require('./api/utilities/handleErrors')
const MongoStore  = require('connect-mongo')(session)
const store = new MongoStore({
  collection: MONGO_SESSION_COLLECTION,
  dbPromise: mongo().then(([dbErr, client, db]) => {
    if (dbErr) {
      console.error('MONGO STORE CONNECTION ERROR:', dbErr)
      process.exit(1)
    }

    return db
  })
})

// Catch & record store errors in the database.
store.on('error', sessionStoreErr)

/*
  Express middleware.
  Express security best practices - http://goo.gl/LBmJXK
*/
app.use(
  express.static( // https://goo.gl/759KqP
    path.resolve(__dirname, 'dist'),
    // \`no-cache\` still caches but it checks with the server via etag to ensure the latest version.
    { setHeaders: res => res.set('Cache-Control', 'no-cache') } // Cache static assets :)
  ),
  helmet(), // Headers security.
  compression(), // GZIP
  bp.json(), // http://goo.gl/ixEWAa, https://goo.gl/Xp2pBC, https://goo.gl/g9V9AM
  bp.urlencoded({ extended: false }), // http://goo.gl/ixEWAa, https://goo.gl/jkPwBu
  session({
    store,
    name: APP_NAME, // Needed if multiple apps running on same host.
    resave: false, // Forces cookie to be resaved back to the session store even if no changes.
    saveUninitialized: true, // Forces a session that is uninitialized to be saved to the store.
    secret: SECRET, // The secret used to sign the session ID cookie.
    cookie: {
      maxAge: null, // Default = \`null\` - closing browser removes cookie & session.
      httpOnly: true // Default = \`true\` - on the client, \`document.cookie\` will not be available.
    }
  })
)

/*
  ADD YOUR CUSTOM ENDPOINTS HERE
  ------------------------------
*/
// app.get(\`\${API}/my-endpoint\`, require('./api/my-endpoint'))


/*
  Catch-all endpoint which delivers \`index.html\` and let's
  the front-end handle all the routing including 404's.
  This should be the last chronological GET route.
*/
app.get('*', require('./api/home'))

// And so it begins...
app.listen(API_PORT, () => {
  if (isProd) {
    console.log(\`ðŸ’»  => PRODUCTION: Application running on port \${API_PORT}\\\\n\\\\n\`)
  } else {
    console.log(\`ðŸ’»  => Application running in browser at http://localhost:\${DEV_SERVER_PORT}\\\\n\\\\n\`)
  }
})
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - / should populate "webpack.config.js" correctly 1`] = `
"require('dotenv').config({ path: \`\${__dirname}/.env\` }) // https://goo.gl/Cj8nKu
const { NODE_ENV, DEV_SERVER_PORT, API, API_PORT, API_WEBPACK } = process.env
const path = require('path')
const webpack = require('webpack')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const CleanWebpackPlugin = require('clean-webpack-plugin')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const TerserPlugin = require('terser-webpack-plugin')
const AfterCompilePlugin = require('./after-compile-plugin')


console.log(\`

  +-----------------------------------+
  |                                   |
      NODE ENVIRONMENT: \${NODE_ENV}
  |                                   |
  +-----------------------------------+

\`)

if (NODE_ENV === 'production') console.log('Building for production...\\\\n\\\\n')

module.exports = (env, argv) => ({
  // https://goo.gl/R88FtY - new in Webpack 4.
  mode: env.prod ? 'production' : 'development',

  /*
    https://goo.gl/3FP7kM
    The base directory, an absolute path, for resolving
    entry points and loaders from configuration.
  */
  context: path.resolve(__dirname, 'src'),

  /*
    https://goo.gl/X8nHJZ
    The point(s) to enter the application.
  */
  entry: [
    path.resolve(__dirname, 'src/entry.js')
  ],

  /*
    https://goo.gl/xvjXJd
    The top-level output key contains set of options instructing webpack
    on how and where it should output your bundles, assets and anything else
    you bundle or load with webpack.
  */
  output: {

    /*
      https://goo.gl/DsD2Nn
      This option determines the name of each output bundle.
    */
    filename: '[name].[hash].bundle.js',

    /*
      https://goo.gl/bwR2sW
      The output directory as an absolute path.
    */
    path: path.resolve(__dirname, 'dist'),

    /*
      https://goo.gl/d6Wq2G
      Adds helpful info in development when reading the generated code.
    */
    pathinfo: !env.prod,

    /*
      https://goo.gl/jvYGYt
      The URL of your \`output.path\` from the view of the HTML page.
      The value of the option is prefixed to every URL created by the runtime or loaders.
    */
    publicPath: '/'
  },

  /*
    https://goo.gl/AENyuH
    These options determine how the different types of modules within a project will be treated.
  */
  module: {

    /*
      An array of Rules which are matched to requests when modules are created.
      These rules can modify how the module is created.
      They can apply loaders to the module, or modify the parser.
    */
    rules: [
      /*
        https://goo.gl/aq8Jce
        A Rule can be separated into three parts â€” Conditions, Results and nested Rules.

        Conditions (https://goo.gl/9wzXt9)
        ----------
        In a Rule the properties \`test\`, \`include\`, \`exclude\` and \`resource\` are
        matched with the resource and the property issuer is matched with the issuer.
                         --------                                             ------

        When we import './style.css' within app.js,
        the resource is /path/to/style.css and the issuer is /path/to/app.js.

        Results
        -------
        There are two output values of a Rule:
          1. Applied loaders
            - An array of loaders applied to the resource.
            - Properties: \`loader\`, \`options\`, \`use\`.
            - The \`enforce\` property affects the loader category. Whether it's a normal, pre- or post- loader.
          2. Parser options
            - An options object which should be used to create the parser for this module.
            - Properties: \`parser\`.

        Nested Rules
        ------------
        Nested rules can be specified under the properties \`rules\` and \`oneOf\`.
        These rules are evaluated when the Rule condition matches.
      */

      /*
        JAVASCRIPT
        ----------
        * ESx => ES5
        * JSX => ES5
      */
      {
        // sideEffects: false,
        test: /\\\\.(js|jsx)$/,
        include: path.resolve(__dirname, 'src'),

        /*
          https://goo.gl/99S6sU
          Loaders will be applied from right to left.
          E.x.: loader3(loader2(loader1(data)))
        */
        use: [
          // https://goo.gl/EXjzoG
          {
            /*
              https://goo.gl/N6uJv3 - Babel loader.
                - babel-loader
                - @babel/core
                - @babel/preset-env
                - @babel/preset-react
                - @babel/plugin-proposal-object-rest-spread
                - @babel/plugin-proposal-class-properties
                - @babel/plugin-syntax-dynamic-import
            */
            loader: 'babel-loader',
            options: {
              presets: [
                /*
                  To get tree shaking working, we need the \`modules: false\` below.

                  https://goo.gl/4vZBSr - 2ality blog mentions that the issue is caused
                  by under-the-hood usage of \`transform-es2015-modules-commonjs\`.

                  https://goo.gl/sBmiwZ - A comment on the above post shows that we
                  can use \`modules: false\`.
                */
                [
                  '@babel/preset-env', // https://goo.gl/aAxYAq
                  {
                    modules: false, // Needed for tree shaking to work (see above).
                    useBuiltIns: 'entry', // https://goo.gl/7ugJ8K
                    corejs: { // https://goo.gl/9Vfu6X
                      version: 3,
                      proposals: true
                    }
                  }
                ],
                '@babel/preset-react' // https://goo.gl/4aEFV3
              ],

              // https://goo.gl/N9gaqc - List of Babel plugins.
              plugins: [
                '@babel/plugin-proposal-object-rest-spread', // https://goo.gl/LCHWnP
                '@babel/plugin-proposal-class-properties', // https://goo.gl/TE6TyG
                '@babel/plugin-syntax-dynamic-import' // https://goo.gl/ho4CDh
              ]
            }
          }
        ]
      },

      /*
        SCSS
        ----
        * SCSS => CSS
        * Extract CSS from JS bundle => separate asset
        * Asset => <link> in index.html
      */
      {
        test: /\\\\.(scss|css)$/,
        include: path.resolve(__dirname, 'src'),
        use: [
          MiniCssExtractPlugin.loader, // https://goo.gl/uUBr8G
          {
            /*
              https://goo.gl/L44Kxn
              Using \`fast-css-loader\` combined with \`fast-sass-loader\` (below)
              produces about a 50% faster build. You'll notice it while developing.
              \`css-loader\` is still included so feel free to switch.
            */
            loader: 'fast-css-loader',
            options: {
              importLoaders: 2
            }
          },
          'postcss-loader', // https://goo.gl/BCwCzg - needs to be *after* \`css-loader\`.
          {
            /*
              https://goo.gl/GtngkV
              Using \`fast-sass-loader\` combined with \`fast-css-loader\` (above)
              produces about a 50% faster build. You'll notice it while developing.
              \`sass-loader\` is still included so feel free to switch.
            */
            loader: 'fast-sass-loader',
            options: {

              /*
                https://goo.gl/hVweJ7
                An array of paths that in which to attempt to resolve your
                @import declarations made in your scss files.
              */
              includePaths: [
                'node_modules/sassyons'
              ],

              /*
                https://goo.gl/xxBHk3
                Values: nested, expanded, compact, compressed
              */
              outputStyle: env.prod ? 'compressed' : 'expanded'
            }
          }
        ]
      },

      /*
        FONTS
        -----
        * Copies fonts found within the \`src\` tree to the \`dist\` folder
        * Keeps the original file name
      */
      {
        test: /\\\\.(woff|woff2|eot|ttf|otf)$/,
        include: path.resolve(__dirname, 'src'),
        use: [
          {
            loader: 'file-loader',
            options: {
              name: '[name].[ext]'
            }
          }
        ]
      },

      /*
        IMAGES
        ------
        * Copies fonts found within the \`src\` tree to the \`dist\` folder
        * Keeps the original file name
      */
      {
        test: /\\\\.(png|svg|jpg|gif)$/,
        include: path.resolve(__dirname, 'src/assets'),
        use: [
          {
            loader: 'file-loader',
            options: {
              name: '[name].[ext]'
            }
          }
        ]
      }
    ]
  },

  // https://goo.gl/NnR9ME
  resolve: {

    /*
      https://goo.gl/7HMoAb
      Create aliases to import certain modules more easily.
      Eliminates having to type out ../../../ all the time.
    */
    alias: {
      components: path.resolve(__dirname, 'src/components'),
      assets: path.resolve(__dirname, 'src/assets'),
      actions: path.resolve(__dirname, 'src/utils/actions'),
      helpers: path.resolve(__dirname, 'src/utils/helpers'),
      middleware: path.resolve(__dirname, 'src/utils/middleware'),
      reducers: path.resolve(__dirname, 'src/utils/reducers'),
      utils: path.resolve(__dirname, 'src/utils')
    },

    /*
      https://goo.gl/57vTmD
      Automatically resolve certain extensions without having to type them out.
    */
    extensions: ['.js', '.jsx', '.json', '.scss']
  },

  // https://goo.gl/bxPV7L
  optimization: {
    minimizer: [
      // https://goo.gl/yWD5vm - List of reasons we're using Terser instead (Webpack is too!).
      new TerserPlugin({ // https://goo.gl/YgdtKb
        cache: true, // https://goo.gl/QVWRtq
        parallel: true, //https://goo.gl/hUkvnK
        terserOptions: { // https://goo.gl/y3psR1
          ecma: 5,
          output: {
            comments: false
          }
        }
      })
    ]
  },

  // https://goo.gl/aDKWnb
  plugins: [
    /*
      https://goo.gl/SZjjmC
      Make global variables available to the app.
      Needed in order to use the production-ready minified version of React.
    */
    new webpack.DefinePlugin({
      // Convenience variables.
      __DEV__: !env.prod,
      __PROD__: env.prod,

      /*
        https://goo.gl/sB6d6b
        Needed in order to use the production-ready minified version of React.
        Avoids warnings in the console.
      */
      'process.env': {
        NODE_ENV: JSON.stringify(env.prod ? 'production' : 'development')
      }
    }),

    // This must be used in conjunction with the associated scss module rule.
    new MiniCssExtractPlugin({
      // Options similar to the same options in webpackOptions.output
      // Both options are optional.
      filename: '[name].[hash].css',
      chunkFilename: '[id].css'
    }),

    /*
      https://goo.gl/xP7eDB
      A webpack plugin to remove/clean your build folder(s) before building.
      The targeted folder is whatever is set above for \`output.path\`.
      Since our build process generates a js, css, and html file, we'll only
      clean those types. This allows you to put any other static assets in the
      \`dist\` folder worry free, such as fonts, images, etc.
    */
    new CleanWebpackPlugin({
      verbose: true,
      cleanOnceBeforeBuildPatterns: ['*.js', '*.css', '*.html'],
      cleanAfterEveryBuildPatterns: ['*.js', '*.css', '*.html']
    }),

    /*
      https://goo.gl/pwnnmX, https://goo.gl/og4sNK
      Generates the \`index.html\` file.
    */
    new HtmlWebpackPlugin({
      template: path.resolve(__dirname, 'src/index.ejs'),
      title: '',
      mobileThemeColor: '#000000',
      description: '',
      minify: {
        collapseWhitespace: true,
        removeComments: true
      }
    }),

    /*
      A simple, custom Webpack plugin to run a function after each build.
      You can see the code in \`after-compile-plugin.js\` in the project root dir.
    */
    !env.prod && new AfterCompilePlugin({
      run: () => {
        console.log('\\\\n')
        API && console.log(\`ðŸŒŽ  => API listening on port \${API_PORT}...\`)
        console.log(\`ðŸ’»  => Application running in browser at http://localhost:\${DEV_SERVER_PORT}\\\\n\\\\n\`)
      }
    })
  ].filter(Boolean),

  // https://goo.gl/HBnQlq
  devServer: {
    /*
      https://goo.gl/eFdUfe
      Tell the dev server where to serve content from.
      This is only necessary if you want to serve static files.
      Content not served from Webpack's devServer is served from here.
    */
    contentBase: path.resolve(__dirname, 'dist'),

    /*
      https://goo.gl/mgQHiQ
      '...the index.html page will likely have to be served
      in place of any 404 responses.'
    */
    historyApiFallback: true,

    /*
      https://goo.gl/A8ZvxG
      Want to view your site on your phone?
      Make sure your computer and phone are on the same wifi network,
      and navigate to your computer's ip addres: 192.1.2.3:<dev server port>
    */
    host: '0.0.0.0',

    // https://goo.gl/fZ1Hff
    open: true,

    // https://goo.gl/EVMMyC
    port: DEV_SERVER_PORT,

    /*
      https://goo.gl/mrysGp, https://goo.gl/srfqLB
      Nobody wants to see 0.0.0.0 in the browser. This get's rid of that.
    */
    public: \`http://localhost:\${DEV_SERVER_PORT}\`,

    /*
      https://goo.gl/a6WW1p
      Redirect non-static asset calls to the backend API server.
      Unrecognized urls (non-API calls) will be directed to '/'.
      404's will be served \`index.html\` by \`historyApiFallback\` above.
    */
    proxy: API_WEBPACK ? {
      [API_WEBPACK]: {
        target: \`http://localhost:\${API_PORT}\`,
        bypass(req, res, proxyOptions) {
          // Direct all non-get requests to the API server.
          if (req.method.toLowerCase() !== 'get') return

          /*
            Proxy url (browser) requests back to '/'
            and let the front end do all the routing.
            For all others, let the API server respond.
          */

          // Url / browser request - allow front end routing to handle all the things.
          if ((req.headers.accept || '').includes('html')) return '/'

          // Let the API server respond by implicitly returning here.
        }
      }
    } : {}
  },

  /*
    https://goo.gl/K4eZeE
    Seems to be the fastest one with accurate line numbers
    matching what you'd see in your editor.
  */
  devtool: !env.prod && 'cheap-module-eval-source-map',

  /*
    https://goo.gl/ZisDCb
    The externals configuration option provides a way of excluding dependencies
    from the output bundles. Instead, the created bundle relies on that dependency
    to be present in the consumer's environment.

    If you want to load 3rd party libraries via a CDN instead of bundling them,
    include them here in addition to adding \`<script>\` tags to \`index.ejs\`.
  */
  // externals: {
  //   react: { root: 'react' },
  //   'react-dom': { root: 'reactDOM' },
  //   // 'react-router-dom': { root: 'ReactRouterDOM' }
  // },

  /*
    https://goo.gl/3mK5hF
    \`web\` is default, but if you're making a 3rd party library
    consumed in Node, change this to \`node\`. There are others as well.
  */
  target: 'web'
})
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /api should populate "home.js" correctly 1`] = `
"const path = require('path')

/*
  THIS ROUTE WILL ONLY GET HIT WHEN SOMEONE NAVIGATES TO A
  NON-EXISTENT ROUTE. THE FRONT END SHOULD DIRECT TO A 404 ROUTE.
*/

function home(req, res) {
  /*
    This folder & file will exist after you have run \`npm run build\`.
    While developing, the development server will serve \`index.html\`
    from memory, avoiding any contact with this route in the first place.
  */
  res.sendFile(path.resolve(__dirname, '../dist/index.html'), err => {
    /*
      If the file wasn't found, send 404.
      This can happen in you manually change
      the url to something non-existant
    */
    if (err) res.sendStatus(404)
  })
}

module.exports = home
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /api/utilities should populate "catchy.js" correctly 1`] = `
"/*
  Inspired by this article - https://goo.gl/9KnMYT
  Catchify is also a great library for this - https://github.com/majgis/catchify
*/

const catchy = value => (
  Promise.resolve(value)
    .then(res => [null, res])
    .catch(err => [err])
)

module.exports = catchy
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /api/utilities should populate "errorUtil.js" correctly 1`] = `
"/*
  Calling \`JSON.stringify(error)\` will result in '{}' if there is no
  \`Error.prototype.toJSON\` (https://goo.gl/wsc2Jr). In order to
  mitigate that, this helper function takes advantage of the 2nd argument
  to \`JSON.stringify\` (https://goo.gl/XNHK2U) It ensures that we get back
  a properly stringified object with keys & values.

  Before:
    JSON.stringify(error) => '{}'

  After:
    stringifyError(error) => '{ \\"stack\\": ..., \\"message\\": ..., \\"etc\\": ... }'
*/

const replacer = (k, value) => {
  if (!(value instanceof Error)) return value

  return Object
    .getOwnPropertyNames(value)
    .reduce((acc, key) => ({ ...acc, [key]: value[key] }), {})
}

const stringifyError = (err, spacing = 0) => JSON.stringify(err, replacer, spacing)

const errorToObject = err => JSON.parse(stringifyError(err))

module.exports = {
  stringifyError,
  errorToObject
}
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /api/utilities should populate "handleErrors.js" correctly 1`] = `
"const mongo = require('./mongo')
const { errorToObject } = require('./errorUtil')
const isProd = process.env.NODE_ENV === 'production'

/*
  toLocaleString - https://goo.gl/obzAhL
  Returns a date string local to NY - '9/14/2017, 2:36:31 PM'
  https://goo.gl/SkVvba
*/
const localDate = () => new Date().toLocaleString('en-US', { timeZone: 'America/New_York' })

/*
  This function is used to create error objects that will be stored in MongoDB.
  The idea is that there will be an admin-only section on the front end
  that will display this error data in a meaningful way.
*/
const createError = (type = 'unknown', error = {}) => ({
  ...errorToObject(error),
  type,
  localDate: localDate(),
  date: Date.now()
})

// A helper function that saves errors to the database.
async function saveErrorToDb(err) {
  if (!isProd) return console.log('ERROR CREATED FOR DB:', err)

  const [dbErr, client, db] = await mongo()
  if (dbErr) return
  await db.collection('errors').insertOne(err)
  client.close()
}

// Inserts, saves, etc. error's are handled with this function.
function operationErr(err, operation, collection, req) {
  const newError = {
    ...createError('db operation', err),
    operation,
    collection,
    url: req.originalUrl,
  }

  saveErrorToDb(newError)
}

// Errors happening from the session store which uses MongoDB.
function sessionStoreErr(err) {
  const error = createError('session store', err)
  saveErrorToDb(error)
}

// When Mongo can't connect.
function noConnect(res, err) {
  res.status(500).send({ error: errorToObject(err) })
}

module.exports = {
  operationErr,
  sessionStoreErr,
  noConnect
}
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /api/utilities should populate "logMongoAuthWarning.js" correctly 1`] = `
"const chalk = require('chalk')

function logMongoAuthWarning({ MONGO_USER, MONGO_USER_PASSWORD }) {
  const dashes = '='.repeat(54)
  const warning = [
    '',
    !(MONGO_USER && MONGO_USER_PASSWORD)
      ? chalk.red('No Mongo credentials found.')
      : !MONGO_USER
      ? chalk.red('No \`MONGO_USER\` value found.')
      : chalk.red('No \`MONGO_USER_PASSWORD\` value found'),
    chalk.bold.red('YOUR DATABASE WILL ALLOW UN-AUTHENTICATED CONNECTIONS!'),
    '',
    'Add a single user in the \`admin\` database and then',
    \`ensure \\\\\`\${chalk.bold('MONGO_USER')}\\\\\` and \\\\\`\${chalk.bold('MONGO_USER_PASSWORD')}\\\\\` are added\`,
    'to your environment variables.',
    '',
    ''
  ].join('\\\\n')

  console.warn(dashes) // START LOGGING.
  console.warn(warning)

  ;[
    chalk.bold('// Use the \`admin\` database.'),
    chalk.cyan('use admin'),
    '',
    chalk.bold('// Create a user with the appropriate roles.'),
    \`\${chalk.blue('const')} \${chalk.cyan('user')} = {\`,
    \`  \${chalk.cyan('user:')} \${chalk.yellow(\`'myUserName'\`)}, \${chalk.gray('// Make sure to change this!')}\`,
    \`  \${chalk.cyan('pw:')} \${chalk.yellow(\`'myPassword'\`)}, \${chalk.gray('// Make sure to change this!')}\`,
    \`  \${chalk.cyan('roles:')} [\`,
    \`    { \${chalk.cyan('role:')} \${chalk.yellow(\`'userAdminAnyDatabase'\`)}, \${chalk.cyan('db:')} \${chalk.yellow(\`'admin'\`)} },\`,
    \`    \${chalk.yellow(\`'readWriteAnyDatabase'\`)}\`,
    '  ]',
    '}',
    '',
    \`\${chalk.bold('// Save that user to the \`admin\` database.')}\`,
    \`\${chalk.cyan('db')}.\${chalk.yellow('createUser')}(\${chalk.cyan('user')})\`
  ].forEach(line => console.log(line))

  console.log(\`\\\\n\\\\nSee \${chalk.bold.blue('https://goo.gl/T5Rpe6')} for more details.\`)
  console.log('')
  console.log(dashes) // FINISH LOGGING.
}

module.exports = logMongoAuthWarning
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /api/utilities should populate "mongo.js" correctly 1`] = `
"/*
  The purpose of this module is to allow the use of async / await
  when connecting to MongoDB throughout the app. An example:

  async function example() {
    const [dbErr, client, db] = await mongo()
    const postsCollection = await db.collection('posts')

    ...

    client.close()
  }
*/

const { MongoClient } = require('mongodb')
const logMongoAuthWarning = require('./logMongoAuthWarning')
const {
  MONGO_URI,
  MONGO_URI_PROD,
  APP_NAME,
  MONGO_USER,
  MONGO_USER_PASSWORD,
  MONGO_AUTH_SOURCE,
  NODE_ENV
} = process.env
const isProd = NODE_ENV === 'production'
const url = isProd ? MONGO_URI_PROD : MONGO_URI
const options = { useNewUrlParser: true }

if (isProd) {
  if (MONGO_USER && MONGO_USER_PASSWORD) {
    // Set the authentication credentials for the database.
    options.auth = { user: MONGO_USER, password: MONGO_USER_PASSWORD }
    options.authSource = MONGO_AUTH_SOURCE
  } else {
    // If no credentials found,
    // log out some warnings and instructions on how to create them.
    logMongoAuthWarning({ MONGO_USER, MONGO_USER_PASSWORD })
  }
}

/*
  We default to connecting to a database named after the \`APP_NAME\`.
  Users are still free to pass in their own custom name.
  To set the db name globally, replace \`APP_NAME\` below with a string.
*/
const mongo = (databaseName = APP_NAME) => (
  MongoClient.connect(url, options)
    .then(client => [null, client, client.db(databaseName)])
    .catch(err => [err])
)

module.exports = mongo
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /dist should populate "favicon.ico" correctly 1`] = `"        h  &         ï¿½  ï¿½  (                                   Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Nï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½022.32031.32Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½/42342.32.32:ksPï¿½ï¿½Pï¿½ï¿½022022133.32022142Nï¿½ï¿½Oï¿½ï¿½022022023022.320221;;Pï¿½ï¿½Sï¿½ï¿½.31Pï¿½ï¿½Qï¿½ï¿½022022Pï¿½ï¿½Rï¿½ï¿½-21022Nï¿½ï¿½Pï¿½ï¿½Rï¿½ï¿½022133Nï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½/43.32Nï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Uï¿½ï¿½022022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32.32Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Oï¿½ï¿½1330221331.*Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32.32Qï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½.310220220220'#Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32.32Qï¿½ï¿½Pï¿½ï¿½,)%022022/34Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32.32Qï¿½ï¿½Pï¿½ï¿½022022Nï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32.32Qï¿½ï¿½Pï¿½ï¿½022022Qï¿½ï¿½Qï¿½ï¿½/43Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32.32Qï¿½ï¿½Pï¿½ï¿½Lï¿½ï¿½022022031022133Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32022Mï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½1330223))Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½                                                                (       @                            Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Nï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½Oï¿½ï¿½Nï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Lï¿½ï¿½Qï¿½ï¿½Lï¿½ï¿½7OO0547RVNï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½@ï¿½ï¿½0;91657X[Nï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½5Z^022022.32142031022.32@ï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½Eï¿½ï¿½/42.32342022.32.31.32.32:ksNï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Lï¿½ï¿½1,+0220220220220220220220220223EDNï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½0/1133022022022022022022022022222.31Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½467022022022342133022.32022022022142Pï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½/11022022022222023142022.32.320220220221;;Pï¿½ï¿½Pï¿½ï¿½/42022022022111>ï¿½ï¿½Oï¿½ï¿½022022022022-20045Nï¿½ï¿½Lï¿½ï¿½Pï¿½ï¿½.32022022022-3./43Mï¿½ï¿½Mï¿½ï¿½6bi-41022022022.43Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Sï¿½ï¿½342.31Lï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½6SW022022022031Pï¿½ï¿½Nï¿½ï¿½Rï¿½ï¿½6QU-21422022Nï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Rï¿½ï¿½133022022133Qï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½9fjPï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32022.32022Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½022Rï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½231022022/43Mï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½/43022.32022Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Oï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Uï¿½ï¿½031022022022Pï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½133022022022133Nï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Nï¿½ï¿½Oï¿½ï¿½0.-133022022022133/431.*Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Mï¿½ï¿½389-32111022133022022022031Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½Jï¿½ï¿½.310220220220220220220220'#Pï¿½ï¿½Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Oï¿½ï¿½/34022022022022031-21.32Bï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½,)%222022022022022/34=ï¿½ï¿½Qï¿½ï¿½Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32022022.31133Pï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½022022022.32Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Mï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Lï¿½ï¿½022022022/11Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Mï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Tï¿½ï¿½022022022022Qï¿½ï¿½Nï¿½ï¿½Qï¿½ï¿½Nï¿½ï¿½/43022Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½/43133022022022/11.32/34022022022.31Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½Lï¿½ï¿½134022022022/430310220220221333?AQï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½.32022.32022Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Nï¿½ï¿½.'$/11022022022022022022/43,'&Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½.32022022133Mï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½0)&1330310220223))Oï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Oï¿½ï¿½Oï¿½ï¿½Nï¿½ï¿½Oï¿½ï¿½Oï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Qï¿½ï¿½Nï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½Pï¿½ï¿½                                                                                                                                "`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /dist should populate "robots.txt" correctly 1`] = `""`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /src should populate "entry.js" correctly 1`] = `
"/*
  https://goo.gl/mw8Ntd - \`@babel/polyfill\` has been deprecated.
  If you need to polyfill certain JS features, uncomment the two imports below.
  Be sure to adjust the \`browserslist\` field in your \`package.json\` file.
*/
// import 'core-js/stable'
// import 'regenerator-runtime/runtime' // Needed to polyfill async / await.

// Import our top-level sass file.
import './styles/styles.scss'

// Import React.
import React from 'react'
import ReactDOM from 'react-dom'

// Import our store provider.
import { Provider } from 'react-redux'

// Import our components.
import Home from 'components/Home'
import NotFound from 'components/NotFound'

// Import a store, created & ready to go.
import store from './store'

// Import React Router things.
import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'


// Top-level classes on the body. Feel free to remove / change.
document.body.className = 'bg-black-80 fw4 white-80'

// Mount our app.
ReactDOM.render(
  <Provider store={store}>
    <Router>
      <Switch>
        <Route exact path='/' component={Home} />
        <Route component={NotFound} />
      </Switch>
    </Router>
  </Provider>,
  document.querySelector('#app')
)
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /src should populate "index.ejs" correctly 1`] = `
"<!DOCTYPE html>
<html lang=\\"en-US\\">
<head>
  <title><%= htmlWebpackPlugin.options.title %></title>
  <meta charset=\\"UTF-8\\">
  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">
  <meta name=\\"theme-color\\" content=\\"#000000\\">

  <% if (htmlWebpackPlugin.options.description) { %>
  <meta name=\\"description\\" content=\\"<% htmlWebpackPlugin.options.description %>\\">
  <% } %>

  <% if (htmlWebpackPlugin.options.mobileThemeColor) { %>
  <meta name=\\"theme-color\\" content=\\"<% htmlWebpackPlugin.options.mobileThemeColor %>\\">
  <meta name=\\"apple-mobile-web-app-status-bar-style\\" content=\\"<% htmlWebpackPlugin.options.mobileThemeColor %>\\">
  <% } %>

  <link href=\\"/favicon.ico\\" rel=\\"shortcut icon\\" type=\\"image/x-icon\\" />
</head>
<body>
  <div id=\\"app\\"></div>
</body>
</html>
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /src should populate "store.js" correctly 1`] = `
"import { combineReducers, createStore, applyMiddleware, compose } from 'redux'
import home from 'reducers/homeReducer'


// Add all your custom middleware to this array.
const middlewareList = []

// Add all your reducers to this object.
const rootReducer = combineReducers({ home })

// https://goo.gl/XRLgX8
// Using Redux DevTools extension? You should...
const composeEnhancers = !__PROD__ ? (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose) : compose

// Create the Redux store in all its glory!
const store = createStore(
  rootReducer,
  composeEnhancers(applyMiddleware(...middlewareList))
)

export default store
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /src/components should populate "Home.jsx" correctly 1`] = `
"import React from 'react'
import { connect } from 'react-redux'
import { changeColor } from 'actions'


const Home = ({ color, randomizeColor }) => (
  <>
    <header className='pv5 bg-gold black-80 tc'>
      <h1 className='mt0 mb1'>Create New App</h1>
      <div className='ttc'>by Qodesmith</div>
    </header>
    <div className='pt4 pb1 tc'>
      Go save the world with <span className='b' style={{ color }}>JavaScript</span>
    </div>
    <div className='tc'>
      and edit <code>src/components/<span className='b'>Home.jsx</span></code>!
    </div>
    <div className='df justify-center mt3'>
      <div className='ph3 pv2 no-select ba-1px pointer' onClick={randomizeColor}>
        Random Color
      </div>
    </div>
  </>
)

const mapStateToProps = ({ home }) => home
const mapDispatchToProps = dispatch => ({
  randomizeColor: () => dispatch(changeColor())
})

export default connect(mapStateToProps, mapDispatchToProps)(Home)
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /src/components should populate "NotFound.jsx" correctly 1`] = `
"import React from 'react'

const NotFound = () => (
  <>
    <h2>Where's Waldo?</h2>
    <p>More importantly, where are <span className='i'>you?</span> Because from the looks of it, you're lost, pal. Might wanna find a page that actually exists...</p>
  </>
)

export default NotFound
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /src/styles should populate "_global.scss" correctly 1`] = `
"/*
  px <-> em: http://pxtoem.com/
*/

* {
  box-sizing: border-box;
}

html,
body {
  margin: 0;
  padding: 0;

  // https://goo.gl/YK3TNB
  // size/line-height | family
  font: 16px/1 'Open Sans', Arial, Helvetica, sans-serif;
}
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /src/styles should populate "styles.scss" correctly 1`] = `
"/////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                             //
//  This file will be the top-most entry point for all styles in the app.                      //
//  Any dependant styles should be explicitly imported here.                                   //
//                                                                                             //
//  Using \`~\` - https://goo.gl/sU3Cmv                                                          //
//  \\"The sass-loader uses node-sass' custom importer feature to pass all queries               //
//  to the webpack resolving engine. Thus you can import your Sass modules from node_modules.  //
//  Just prepend them with a ~ to tell webpack that this is not a relative import.\\"            //
//  Think of \`~\` as a way of saying \`node_modules\`.                                            //
//                                                                                             //
//  Importing CSS files - include the extension:                                               //
//  @import '~my-library/styles.css'                                                           //
//  @import 'path/to/my/library/styles.css'                                                    //
//                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////


/*
  Sassyons
  --------

  PSA - Sassyons is a utility library that is NOT meant to be bundled as a whole into your project.
  There are an obnoxious amount of classes that give you, the developer, full control
  over styling your project. HOWEVER, the Webpack bundle included with this project
  uses \`purgecss\` to strip out unused styles, so you need not be concered!

  Read more - https://github.com/qodesmith/sassyons
*/
@import '~sassyons/scss/sassyons';


/*
  Application Styles
  ------------------

  All our application-specific styles will go below.
  @import each of them in reverse-priority order (bottom = highest priority).
*/
@import 'global';
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /src/utils/actions should populate "index.js" correctly 1`] = `
"export const changeColor = () => ({ type: 'CHANGE_COLOR' })
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /src/utils/helpers should populate "index.js" correctly 1`] = `
"// https://goo.gl/MrXVRS - micro UUID!
export const uuid = a=>a?(a^Math.random()*16>>a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,uuid)

export const randomNum = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)

const letters = 'abcdef'
const numbers = '0123456789'
export const randomHexColor = () => (
  letters.split('').reduce(hex => {
    const set = randomNum(0, 1) ? letters : numbers
    const index = randomNum(0, set.length - 1)
    return \`\${hex}\${set[index]}\`
  }, '#')
)
"
`;

exports[`cli - React + MongoDB + Express + React Router + Redux project contents of files created Folder - /src/utils/reducers should populate "homeReducer.js" correctly 1`] = `
"import { randomHexColor } from 'helpers'

const initialState = { color: '#ffd700' }

const homeReducer = (state = initialState, action = {}) => {
  switch (action.type) {
    case 'CHANGE_COLOR':
      return { ...state, color: randomHexColor() }
    default:
      return state
  }
}

export default homeReducer
"
`;
